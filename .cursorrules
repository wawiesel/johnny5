# Johnny5 — Document Decomposition and Recomposing Environment

Johnny5 is a Python package that:
1. Decomposes a PDF into Docling's lossless JSON.
2. Applies a fixup layer (user-defined, hot-reloadable).
3. Rebuilds a corrected lossless JSON.
4. Recomposes the document into a structured format (QMD/HTML).
5. Serves an interactive web UI (PDF.js) to visualize Decompose ↔ Recompose.

Stack:
- Python 3.9+
- FastAPI + Uvicorn (web)
- Docling + PyPDFium2 (PDF parsing)
- Watchfiles (hot reload)
- Click (CLI)
- Jinja2 (templating)
- Numpy (density/margin calculations)

## Code Quality and Style

# General code standards
- Follow PEP 8 and type-hint everything.
- Use Ruff + Black formatting (100-character limit).
- Add concise, informative docstrings to all public functions.
- Include type annotations for function parameters and returns.
- Use pathlib.Path instead of raw strings for paths.
- Never hardcode file paths; respect project-relative `_cache` directory.
- Avoid global mutable state unless clearly necessary (e.g., overlay cache).
- Use structured logging (e.g., `logging.info`), not bare print().

# Testing
- Every new module must include or extend tests under `tests/`.
- Write tests using pytest, not unittest.

# Documentation
- Each new submodule must include a top-level docstring describing its purpose.
- Use docstrings to describe I/O and assumptions for each function.

## Architecture and File Boundaries

# Core modules and their responsibilities

johnny5.cli
    - Defines the CLI entrypoint (`johnny5 disassemble`, `johnny5 web`)
    - Should not contain heavy logic.
    - Delegates to johnny5.decomposer and johnny5.server.

johnny5.decomposer
    - Handles PDF → Docling → lossless JSON → fixup → corrected JSON.
    - Exposes run_decompose(pdf: Path, layout_model: str, enable_ocr: bool, json_dpi: int, fixup: str) -> Path.
    - Produces `_cache/lossless.json` and `_cache/lossless_fixed.json`.

johnny5.recomposer
    - Converts corrected JSON → structured text (QMD) and HTML.
    - Exposes run_recompose(json_path: Path) -> Tuple[str, str] (QMD text, HTML string).

johnny5.server
    - FastAPI web app serving PDF.js UI.
    - Mounts static files, templates, and provides WebSocket overlay updates.
    - Launch with uvicorn.

johnny5.utils.density
    - Implements horizontal/vertical density computation given page JSON.

johnny5.utils.margins
    - Implements robust margin inference (using percentiles of bbox coordinates).

johnny5.utils.fixup_context
    - Defines a typed FixupContext dataclass with page, cluster, style, and normalized geometry.

johnny5.fixups.example_fixup
    - Demonstrates a simple rule-based fixup function.

## Development Workflow Rules

# Development and branching
- Always create new feature branches prefixed with feat/, fix/, or refactor/.
- Use conventional commit messages (feat:, fix:, chore:, docs:, etc.).
- All commits must pass `ruff check .`, `black --check .`, and `pytest`.

# Hot reload and live preview
- Implement file watchers (watchfiles) to reload fixup scripts in real time.
- Ensure the FastAPI app can push overlay updates via WebSocket when fixups change.

# Build & packaging
- Package should build with Hatch (`hatch build`).
- CLI must be installed as `johnny5` entrypoint.
- Support `pip install -e .` for editable development.

# Documentation (later)
- Plan to generate Markdown docs using mkdocs-material or Sphinx.

## Cursor Behavior

# Cursor behavior preferences
- When generating code, follow the established modular structure under src/johnny5/.
- Do not inline large HTML/JS templates in Python; reference external files in web/templates and web/static.
- When adding functions, ensure the docstring specifies arguments, return type, and side effects.
- Always use async FastAPI endpoints where appropriate.
- If in doubt, prefer composition (separate utility modules) over adding new monoliths to server.py.
- Prefer Pathlib + f-string formatting over os.path.
- Avoid duplicating logic between CLI and server.

## Automation Rules

# CI and testing expectations
- Run tests automatically via GitHub Actions (see .github/workflows/ci.yml).
- All pull requests must pass lint and test before merge.
- Use pytest fixtures for test data under tests/fixtures.

## Documentation & GitHub Integration

# Repository metadata
- README must contain:
  - Overview of Johnny5 architecture.
  - Installation (`pip install johnny5` or `pip install -e .`).
  - CLI usage examples.
  - Screenshot of web interface (to be added later).
  - Link to LICENSE and contributing guide.

- LICENSE: MIT.
- Create CONTRIBUTING.md explaining code style and pre-commit setup.
- Add CODEOWNERS for core maintainers (you and any collaborators).
