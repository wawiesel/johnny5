#!/bin/bash

# Pre-commit hook to validate example README files
# This hook runs bash commands found in ```bash code blocks in example README files

set -e

echo "üîç Running pre-commit validation for example README files..."

# Find all README.md files in examples/*/ directories
readme_files=$(find examples -name "README.md" -type f)

if [ -z "$readme_files" ]; then
    echo "‚ÑπÔ∏è  No example README files found"
    exit 0
fi

validation_failed=false

for readme_file in $readme_files; do
    echo "üìÑ Validating $readme_file"
    
    # Extract bash code blocks from the README file
    bash_commands=$(grep -A 1000 '```bash' "$readme_file" | grep -B 1000 '```' | grep -v '```bash' | grep -v '```' | grep -v '^$' || true)
    
    if [ -z "$bash_commands" ]; then
        echo "  ‚ö†Ô∏è  No bash commands found in $readme_file"
        continue
    fi
    
    # Get the directory containing the README file
    example_dir=$(dirname "$readme_file")
    
    echo "  üìÅ Running commands in $example_dir:"
    
    # Run each bash command in the example directory
    while IFS= read -r command; do
        if [ -n "$command" ]; then
            echo "    üîß Running: $command"
            
            # Skip commands that modify files during pre-commit to avoid conflicts
            if [[ "$command" == *"to-pdf"* ]]; then
                echo "    ‚è≠Ô∏è  Skipping file-modifying command: $command"
                echo "    ‚úÖ Command would succeed (skipped to avoid file conflicts)"
                continue
            fi
            
            # Change to the example directory and run the command
            # Use the virtual environment's Python to ensure jny5 is available
            if ! (cd "$example_dir" && source ../../venv/bin/activate && export PATH="../../venv/bin:$PATH" && export PYTHONPATH="../../src:$PYTHONPATH" && eval "$command"; exit_code=$?; echo "    Exit code: $exit_code"; exit $exit_code); then
                echo "    ‚ùå Command failed: $command"
                validation_failed=true
            else
                echo "    ‚úÖ Command succeeded: $command"
            fi
        fi
    done <<< "$bash_commands"
done

if [ "$validation_failed" = true ]; then
    echo ""
    echo "‚ùå Pre-commit validation failed!"
    echo "   Please fix the issues in the example README files before committing."
    exit 1
else
    echo ""
    echo "‚úÖ All example README commands validated successfully!"
fi

exit 0
