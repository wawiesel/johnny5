#!/bin/bash

# Pre-commit hook to validate example README files
# This hook runs bash commands found in ```bash code blocks in example README files

set -e

# Simple progress ticker: prints a dot every 0.5s until PID is done
progress_ticker() {
    local pid=$1
    local start_ts=$(date +%s)
    while kill -0 "$pid" 2>/dev/null; do
        printf '.'
        sleep 0.5
    done
    local end_ts=$(date +%s)
    local elapsed=$(( end_ts - start_ts ))
    echo " (${elapsed}s)"
}

echo "üîé Running JS/CSS linters (if installed)"

# Detect project root (this script lives in scripts/)
ROOT_DIR=$(cd "$(dirname "$0")/.." && pwd)

# ESLint first (fail fast)
if command -v npx >/dev/null 2>&1 && [ -f "$ROOT_DIR/eslint.config.cjs" ]; then
    echo "‚ñ∂ ESLint: src/johnny5/web/static/**/*.js"
    if ! (cd "$ROOT_DIR" && npx --yes eslint "src/johnny5/web/static/**/*.js"); then
        echo "‚ùå ESLint failed"
        exit 1
    else
        echo "‚úÖ ESLint passed"
    fi
else
    echo "‚ÑπÔ∏è  ESLint not configured (skipping). Add eslint.config.cjs to enable."
fi

# Stylelint next
if command -v npx >/dev/null 2>&1 && [ -f "$ROOT_DIR/.stylelintrc.json" ]; then
    echo "‚ñ∂ Stylelint: src/johnny5/web/static/**/*.css"
    if ! (cd "$ROOT_DIR" && npx --yes stylelint "src/johnny5/web/static/**/*.css"); then
        echo "‚ùå Stylelint failed"
        exit 1
    else
        echo "‚úÖ Stylelint passed"
    fi
else
    echo "‚ÑπÔ∏è  Stylelint not configured (skipping). Add .stylelintrc.json to enable."
fi

echo ""
echo "üîç Running pre-commit validation for example README files..."

# Find all README.md files in examples/*/ directories
readme_files=$(find examples -name "README.md" -type f)

if [ -z "$readme_files" ]; then
    echo "‚ÑπÔ∏è  No example README files found"
    exit 0
fi

validation_failed=false

for readme_file in $readme_files; do
    echo "üìÑ Validating $readme_file"
    
    # Extract bash code blocks from the README file
    bash_commands=$(grep -A 1000 '```bash' "$readme_file" | grep -B 1000 '```' | grep -v '```bash' | grep -v '```' | grep -v '^$' || true)
    
    if [ -z "$bash_commands" ]; then
        echo "  ‚ö†Ô∏è  No bash commands found in $readme_file"
        continue
    fi
    
    # Get the directory containing the README file
    example_dir=$(dirname "$readme_file")
    
    echo "  üìÅ Running commands in $example_dir:"
    
    # Run each bash command in the example directory
    while IFS= read -r command; do
        if [ -n "$command" ]; then
            echo "    üîß Running: $command"
            
            # Handle file-modifying commands specially - validate without modifying
            if [[ "$command" == *"to-pdf"* ]]; then
                echo "    üîß Validating file-modifying command: $command"
                # Test the command in a temporary directory to avoid modifying tracked files
                temp_dir=$(mktemp -d)
                cp -r "$example_dir"/* "$temp_dir/" 2>/dev/null || true
                # Calculate the correct path to venv from the temp directory
                venv_path=$(realpath "$example_dir/../../venv/bin/activate")
                src_path=$(realpath "$example_dir/../../src")
                # Run with progress ticker
                if (
                    cd "$temp_dir" && source "$venv_path" \
                    && export PATH="$(dirname "$venv_path"):$PATH" \
                    && export PYTHONPATH="$src_path:$PYTHONPATH" \
                    && ( eval "$command" >/dev/null 2>&1 & CMD_PID=$!; \
                         echo -n "      ‚è≥ Running in temp dir"; progress_ticker $CMD_PID )
                ); then
                    echo "    ‚úÖ Command would succeed: $command"
                    rm -rf "$temp_dir"
                else
                    echo "    ‚ùå Command failed: $command"
                    rm -rf "$temp_dir"
                    validation_failed=true
                fi
                continue
            fi
            
            # Change to the example directory and run the command
            # Use the virtual environment's Python to ensure jny5 is available
            if ! (
                cd "$example_dir" \
                && source ../../venv/bin/activate \
                && export PATH="../../venv/bin:$PATH" \
                && export PYTHONPATH="../../src:$PYTHONPATH" \
                && ( eval "$command" & CMD_PID=$!; echo -n "      ‚è≥ Running"; progress_ticker $CMD_PID )
            ); then
                echo "    ‚ùå Command failed: $command"
                validation_failed=true
            else
                echo "    ‚úÖ Command succeeded: $command"
            fi
        fi
    done <<< "$bash_commands"
done

if [ "$validation_failed" = true ]; then
    echo ""
    echo "‚ùå Pre-commit validation failed!"
    echo "   Please fix the issues in the example README files before committing."
    exit 1
else
    echo ""
    echo "‚úÖ All example README commands validated successfully!"
fi

exit 0
